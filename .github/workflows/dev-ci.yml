# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "develop", "main" ]
  pull_request:
    branches: [ "develop", "main" ]

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    # 현재 저장소의 소스 코드와 서브 모듈 내려 받기
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true
        token: ${{ secrets.ACTION_TOKEN }} # 조직이 아닌 개인 사용자 토큰이므로 유의할 것!

    # JDK 21 (Eclipse Temurin) 환경 구성
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    # Gradle 내려 받기 및 캐싱
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4

    # Gradlew 실행 권한 부여
    - name: Add +x permission to gradlew
      run: chmod +x gradlew

    # 빌드 진행
    - name: Build with Gradle
      run: ./gradlew clean build

    # 테스트 결과 출력
    - name: Publish Test Report
      uses: mikepenz/action-junit-report@v5
      if: success() || failure() # always run even if the previous step fails
      with:
        report_paths: '**/build/test-results/test/TEST-*.xml'

    # 빌드 완료 후 아티펙트 업로드 (Actions 탭에서 내려 받기 가능)
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-libs
        path: |
          build/libs/*.jar
          Dockerfile
